AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy VS Code Server on EC2 Instance'

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    Description: EC2 instance type (minimum t3.medium)
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 KeyPair name for SSH access
    
  VsCodePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: VS Code Server access password (minimum 8 characters)
    
  AllowedCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block to allow VS Code Server access (default allows all IPs)
    
  VolumeSize:
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 100
    Description: EBS volume size (GB)

Mappings:
  RegionMap:
    ap-northeast-2:
      AMI: ami-0f3a440bbcff3d043
      
Resources:
  VsCodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VS Code Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AllowedCIDR
          Description: VS Code Server access
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vscode-sg'

  VsCodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vscode-role'

  VsCodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref VsCodeRole

  VsCodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref VsCodeSecurityGroup
      IamInstanceProfile: !Ref VsCodeInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: !Ref VolumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - |
                #!/bin/bash
                export DEBIAN_FRONTEND=noninteractive
                apt update -y
                apt install -y curl wget git docker.io unzip build-essential

                # Node.js 설치 (code-server 필요)
                curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                apt install -y nodejs

                # code-server 설치
                curl -fsSL https://code-server.dev/install.sh | sh

                # student 사용자 생성 및 권한 설정
                useradd -m -s /bin/bash student
                usermod -aG sudo student
                usermod -aG docker student
                mkdir -p /home/student/.config/code-server

                # code-server 설정
                cat > /home/student/.config/code-server/config.yaml << EOF
                bind-addr: 0.0.0.0:8080
                auth: password
                password: 
              - !Ref VsCodePassword
              - |+

                cert: false
                EOF

                # 소유권 설정
                chown -R student:student /home/student/.config

                # systemd 서비스 생성
                cat > /etc/systemd/system/code-server.service << EOF
                [Unit]
                Description=code-server
                After=network.target

                [Service]
                Type=simple
                User=student
                WorkingDirectory=/home/student
                ExecStart=/usr/bin/code-server
                Restart=on-failure
                RestartSec=5

                [Install]
                WantedBy=multi-user.target
                EOF

                # Docker 활성화 및 시작
                systemctl enable docker
                systemctl start docker

                # code-server 활성화 및 시작
                systemctl daemon-reload
                systemctl enable code-server
                systemctl start code-server

                # 개발 도구 설치
                apt install -y python3 python3-pip vim nano htop tree jq

                # AWS 관련 도구 설치
                # AWS CLI v2 설치
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                rm -rf aws awscliv2.zip

                # AWS CDK 설치
                npm install -g aws-cdk

                # kubectl 최신 버전 설치
                curl -LO "https://dl.k8s.io/release/$$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mv kubectl /usr/local/bin/

                # Helm 최신 버전 설치
                curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

                # Terraform 설치
                TERRAFORM_VER=$$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/v//')
                curl -LO "https://releases.hashicorp.com/terraform/$${TERRAFORM_VER}/terraform_$${TERRAFORM_VER}_linux_amd64.zip"
                unzip "terraform_$${TERRAFORM_VER}_linux_amd64.zip"
                mv terraform /usr/local/bin/
                rm "terraform_$${TERRAFORM_VER}_linux_amd64.zip"

                # krew (kubectl plugin manager) 설치
                KREW_VER=$$(curl -s https://api.github.com/repos/kubernetes-sigs/krew/releases/latest | grep tag_name | cut -d '"' -f 4)
                curl -LO "https://github.com/kubernetes-sigs/krew/releases/download/$${KREW_VER}/krew-linux_amd64.tar.gz"
                tar -xzf krew-linux_amd64.tar.gz
                
                # student 사용자로 krew 설치
                su - student -c "
                cd /tmp
                curl -LO \"https://github.com/kubernetes-sigs/krew/releases/download/$${KREW_VER}/krew-linux_amd64.tar.gz\"
                tar -xzf krew-linux_amd64.tar.gz
                ./krew-linux_amd64 install krew
                rm krew-linux_amd64*
                export PATH=\"\${KREW_ROOT:-\$HOME/.krew}/bin:\$PATH\"
                kubectl krew install ctx
                kubectl krew install ns
                "
                
                rm -f krew-linux_amd64*

                # kubecolor 설치
                KUBECOLOR_VER=$$(curl -s https://api.github.com/repos/hidetatz/kubecolor/releases/latest | grep tag_name | cut -d '"' -f 4)
                curl -LO "https://github.com/hidetatz/kubecolor/releases/download/$${KUBECOLOR_VER}/kubecolor_$${KUBECOLOR_VER}_Linux_x86_64.tar.gz"
                tar -xzf "kubecolor_$${KUBECOLOR_VER}_Linux_x86_64.tar.gz"
                mv kubecolor /usr/local/bin/
                rm "kubecolor_$${KUBECOLOR_VER}_Linux_x86_64.tar.gz"

                # kube-ps1 설치 (Kubernetes 프롬프트)
                curl -LO https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh
                mv kube-ps1.sh /usr/local/bin/
                chmod +x /usr/local/bin/kube-ps1.sh

                # aws-runas 설치
                AWS_RUNAS_VER=$$(curl -s https://api.github.com/repos/mmmorris1975/aws-runas/releases/latest | grep tag_name | cut -d '"' -f 4)
                curl -LO "https://github.com/mmmorris1975/aws-runas/releases/download/$${AWS_RUNAS_VER}/aws-runas-$${AWS_RUNAS_VER}-linux-amd64.zip"
                unzip "aws-runas-$${AWS_RUNAS_VER}-linux-amd64.zip"
                mv aws-runas /usr/local/bin/
                rm "aws-runas-$${AWS_RUNAS_VER}-linux-amd64.zip"

                # Git 설정 및 유용한 도구들
                git config --global init.defaultBranch main
                
                # Starship 프롬프트 설치 (터미널 꾸미기)
                curl -sS https://starship.rs/install.sh | sh -s -- -y

                # student 사용자 환경 설정
                su - student -c "
                echo 'export PATH=/usr/local/bin:\$PATH' >> ~/.bashrc
                echo 'export PATH=\"\${KREW_ROOT:-\$HOME/.krew}/bin:\$PATH\"' >> ~/.bashrc
                echo 'eval \"\$(starship init bash)\"' >> ~/.bashrc
                echo 'source /usr/local/bin/kube-ps1.sh' >> ~/.bashrc
                echo 'PS1=\"[\u@\h \W \$(kube_ps1)]\$ \"' >> ~/.bashrc
                echo 'alias k=kubectl' >> ~/.bashrc
                echo 'alias kc=kubecolor' >> ~/.bashrc
                echo 'alias kctx=\"kubectl ctx\"' >> ~/.bashrc
                echo 'alias kns=\"kubectl ns\"' >> ~/.bashrc
                echo 'alias ll=\"ls -la\"' >> ~/.bashrc
                echo 'alias la=\"ls -A\"' >> ~/.bashrc
                echo 'alias l=\"ls -CF\"' >> ~/.bashrc
                echo 'complete -F __start_kubectl k' >> ~/.bashrc
                echo 'complete -F __start_kubectl kc' >> ~/.bashrc
                "

                # 권한 설정
                chown -R student:student /home/student

                # 완료 신호 전송
                /opt/aws/bin/cfn-signal -e $? --stack 
              - !Ref 'AWS::StackName'
              - ' --resource VsCodeInstance --region '
              - !Ref 'AWS::Region'

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vscode-server'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref VsCodeInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt VsCodeInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'

  VsCodeUrl:
    Description: VS Code Server access URL
    Value: !Sub 'http://${VsCodeInstance.PublicIp}:8080'
    Export:
      Name: !Sub '${AWS::StackName}-VsCodeUrl'

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i your-key.pem ubuntu@${VsCodeInstance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-SSHCommand'

  StudentUserInfo:
    Description: VS Code Server user information
    Value: 'Username: student, Password: configured password'
    Export:
      Name: !Sub '${AWS::StackName}-StudentUserInfo'